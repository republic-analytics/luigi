[build-system]
requires = ["hatchling", "hatch-fancy-pypi-readme>=22.5.0"]
build-backend = "hatchling.build"

[project]
name = "luigi"
authors = [
    {name = "The Luigi Authors"}
]
license = {file = "LICENSE"}
description = "Workflow mgmgt + task scheduling + dependency resolution."
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Environment :: Web Environment",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: System :: Monitoring",
]
dependencies = [
    # Can't use python-daemon>=2.2.0 if on windows
    #     See https://pagure.io/python-daemon/issue/18
    "python-daemon ; platform_system != 'Windows'",
    "python-daemon<2.2.0 ; platform_system == 'Windows'",
    "python-dateutil>=2.7.5,<3",
    "tenacity>=8,<9",
    "tornado>=5.0,<7",
]
dynamic = [
    "readme",  # defer to [tool.hatch.metadata.hooks.fancy-pypi-readme]
    "version",  # defer to [tool.hatch.version]
]

[project.optional-dependencies]
jsonschema = ["jsonschema"]
prometheus = ["prometheus-client>=0.5,<0.15"]
toml = ["toml<2.0.0"]

[project.scripts]
luigi = "luigi.cmdline:luigi_run"
luigid = "luigi.cmdline:luigid"
luigi-grep = "luigi.tools.luigi_grep:main"
luigi-deps = "luigi.tools.deps:main"
luigi-deps-tree = "luigi.tools.deps_tree:main"

[project.urls]
Homepage = "https://github.com/spotify/luigi"

[dependency-groups]
readthedocs = [
    # TODO: how to remove "python-daemon"
    "sphinx>=1.4.4",  # Value mirrored in doc/conf.py
    "sqlalchemy",  # So that we can build documentation for luigi.db_task_history and luigi.contrib.sqla
]

[tool.hatch.version]
# default pattern looks for a variable named `__version__` or `VERSION`
path = "luigi/__version__.py"

[tool.hatch.build]
# limit which files are included in the sdist (.tar.gz) and wheel assets
include = [
    "/LICENSE",
    "/README.rst",
    "/examples",
    "/luigi",  # includes static content
    "/test",
]

[tool.hatch.metadata.hooks.fancy-pypi-readme]
content-type = "text/x-rst"
# construct the PyPI readme from README.rst and extra content
fragments = [
    {text = "\n\n"},
    # TODO: come back to fix this from breaking TOML - `Found tokens after a closed string. Invalid TOML.`
#    {text = """
#.. note::
#
#   For the latest source, discussion, etc, please visit the
#   `GitHub repository <https://github.com/spotify/luigi>`_
#"""},
#    {text = "\n\n"},
    {path = "README.rst"},
]
